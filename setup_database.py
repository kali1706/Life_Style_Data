#!/usr/bin/env python3
"""
Enhanced MySQL Database Setup Script for Lifestyle Analytics
This script will create the database and all required tables.
"""

import pymysql
import os
import sys
from urllib.parse import quote_plus

def get_database_config():
    """Get database configuration from user input or environment variables"""
    
    print("üîß MySQL Database Setup for Lifestyle Analytics")
    print("=" * 50)
    
    # Try to get from environment variables first
    host = os.environ.get('MYSQL_HOST')
    user = os.environ.get('MYSQL_USER')
    password = os.environ.get('MYSQL_PASSWORD')
    port = int(os.environ.get('MYSQL_PORT', 3306))
    
    if not host:
        print("\nüìã Please provide your MySQL server details:")
        host = input("MySQL Host (default: localhost): ").strip() or 'localhost'
    
    if not user:
        user = input("MySQL Username (default: root): ").strip() or 'root'
    
    if not password:
        password = input("MySQL Password: ").strip()
    
    try:
        port_input = input(f"MySQL Port (default: {port}): ").strip()
        if port_input:
            port = int(port_input)
    except ValueError:
        print("‚ö†Ô∏è  Invalid port number, using default 3306")
        port = 3306
    
    return {
        'host': host,
        'user': user,
        'password': password,
        'port': port,
        'database': 'lifestyle_analytics'
    }

def test_connection(db_config):
    """Test MySQL connection"""
    try:
        print(f"\nüîç Testing connection to {db_config['host']}:{db_config['port']}...")
        connection = pymysql.connect(
            host=db_config['host'],
            port=db_config['port'],
            user=db_config['user'],
            password=db_config['password'],
            charset='utf8mb4'
        )
        print("‚úÖ Connection successful!")
        return connection
    except pymysql.Error as e:
        print(f"‚ùå Connection failed: {e}")
        return None

def create_database_and_tables(connection, db_config):
    """Create database and all tables"""
    try:
        with connection.cursor() as cursor:
            # Create database
            print(f"\nüì¶ Creating database '{db_config['database']}'...")
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_config['database']} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            print("‚úÖ Database created successfully!")
            
            # Use the database
            cursor.execute(f"USE {db_config['database']}")
            
            # Read and execute SQL schema
            print("\nüìã Creating tables...")
            schema_file = 'database_schema.sql'
            
            if os.path.exists(schema_file):
                with open(schema_file, 'r', encoding='utf-8') as f:
                    sql_content = f.read()
                
                # Split SQL content by semicolons and execute each statement
                statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
                
                for i, statement in enumerate(statements):
                    if statement.upper().startswith(('CREATE', 'INSERT', 'ALTER', 'DROP')):
                        try:
                            cursor.execute(statement)
                            print(f"‚úÖ Executed statement {i+1}/{len(statements)}")
                        except pymysql.Error as e:
                            print(f"‚ö†Ô∏è  Warning on statement {i+1}: {e}")
            else:
                print(f"‚ùå Schema file '{schema_file}' not found!")
                return False
            
            print("‚úÖ All tables created successfully!")
            
        connection.commit()
        return True
        
    except pymysql.Error as e:
        print(f"‚ùå Error creating database/tables: {e}")
        return False

def generate_config_file(db_config):
    """Generate configuration file for the application"""
    print("\nüìù Generating configuration file...")
    
    # Generate database URL
    password = quote_plus(db_config['password']) if db_config['password'] else ''
    database_url = f"mysql+pymysql://{db_config['user']}:{password}@{db_config['host']}:{db_config['port']}/{db_config['database']}"
    
    config_content = f"""# Database Configuration - Generated by setup_database.py
import os

class Config:
    # Database Configuration
    SQLALCHEMY_DATABASE_URI = '{database_url}'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Other configurations
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'lifestyle-analytics-secret-key-2024'
    
    # Email configuration (add your details)
    MAIL_SERVER = os.environ.get('MAIL_SERVER') or 'smtp.gmail.com'
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')

# MySQL Connection Details:
# Host: {db_config['host']}
# Port: {db_config['port']}
# Username: {db_config['user']}
# Database: {db_config['database']}
"""
    
    with open('database_config_generated.py', 'w') as f:
        f.write(config_content)
    
    print("‚úÖ Configuration file 'database_config_generated.py' created!")
    return database_url

def main():
    """Main setup function"""
    try:
        # Get database configuration
        db_config = get_database_config()
        
        # Test connection
        connection = test_connection(db_config)
        if not connection:
            return False
        
        # Create database and tables
        if not create_database_and_tables(connection, db_config):
            return False
        
        # Generate configuration file
        database_url = generate_config_file(db_config)
        
        print("\nüéâ Database setup completed successfully!")
        print("=" * 50)
        print("üìã Summary:")
        print(f"   ‚Ä¢ Database: {db_config['database']}")
        print(f"   ‚Ä¢ Host: {db_config['host']}:{db_config['port']}")
        print(f"   ‚Ä¢ Username: {db_config['user']}")
        print(f"   ‚Ä¢ Connection URL: {database_url}")
        print("\nüìù Next Steps:")
        print("   1. Update your config.py to use the generated database URL")
        print("   2. Test your application connection")
        print("   3. Start using your lifestyle analytics app!")
        
        return True
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Setup cancelled by user")
        return False
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        return False
    finally:
        if 'connection' in locals():
            connection.close()

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
