#!/usr/bin/env python3
"""
Unified Database Setup Script for Lifestyle Analytics
Supports both MySQL and SQL Server
"""

import os
import sys
import subprocess

def detect_database_type():
    """Detect which database type to use based on available drivers and user preference"""
    
    print("Database Setup for Lifestyle Analytics")
    print("=" * 50)
    print("This script supports both MySQL and SQL Server")
    print()
    
    # Check available drivers
    mysql_available = False
    sqlserver_available = False
    
    try:
        import pymysql
        mysql_available = True
        print("✓ MySQL driver (PyMySQL) is available")
    except ImportError:
        print("✗ MySQL driver (PyMySQL) not available")
    
    try:
        import pyodbc
        sqlserver_available = True
        print("✓ SQL Server driver (PyODBC) is available")
    except ImportError:
        print("✗ SQL Server driver (PyODBC) not available")
    
    print()
    
    if not mysql_available and not sqlserver_available:
        print("❌ No database drivers available!")
        print("Please install at least one database driver:")
        print("  For MySQL: pip install PyMySQL")
        print("  For SQL Server: pip install pyodbc")
        return None
    
    # Ask user to choose
    print("Available database options:")
    options = []
    
    if mysql_available:
        options.append(('1', 'MySQL', 'mysql'))
        print("  1. MySQL")
    
    if sqlserver_available:
        options.append(('2', 'SQL Server', 'sqlserver'))
        print("  2. SQL Server")
    
    print()
    
    while True:
        choice = input(f"Choose database type (1-{len(options)}): ").strip()
        
        for option_num, option_name, db_type in options:
            if choice == option_num:
                print(f"✓ Selected: {option_name}")
                return db_type
        
        print("Invalid choice. Please try again.")

def run_database_setup(database_type):
    """Run the appropriate database setup script"""
    
    if database_type == 'mysql':
        print("\n" + "=" * 50)
        print("Running MySQL Setup")
        print("=" * 50)
        
        # Set environment variable
        os.environ['DATABASE_TYPE'] = 'mysql'
        
        # Import and run MySQL setup
        try:
            from setup_database import main as mysql_main
            return mysql_main()
        except ImportError:
            print("❌ MySQL setup script not found!")
            return False
    
    elif database_type == 'sqlserver':
        print("\n" + "=" * 50)
        print("Running SQL Server Setup")
        print("=" * 50)
        
        # Set environment variable
        os.environ['DATABASE_TYPE'] = 'sqlserver'
        
        # Import and run SQL Server setup
        try:
            from setup_database_sqlserver import main as sqlserver_main
            return sqlserver_main()
        except ImportError:
            print("❌ SQL Server setup script not found!")
            return False
    
    else:
        print(f"❌ Unsupported database type: {database_type}")
        return False

def generate_unified_config(database_type):
    """Generate a unified configuration file"""
    
    print("\n" + "=" * 50)
    print("Generating Configuration File")
    print("=" * 50)
    
    config_content = f"""# Database Configuration - Generated by setup_database_unified.py
import os

# Set database type
os.environ['DATABASE_TYPE'] = '{database_type}'

# Import the unified configuration
from database_config import DatabaseConfig

class Config:
    # Database Configuration
    SQLALCHEMY_DATABASE_URI = DatabaseConfig.get_database_url()
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Other configurations
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'lifestyle-analytics-secret-key-2024'
    
    # Email configuration (add your details)
    MAIL_SERVER = os.environ.get('MAIL_SERVER') or 'smtp.gmail.com'
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')

# Database Type: {database_type.upper()}
# Generated automatically by setup_database_unified.py
"""
    
    with open('database_config_generated.py', 'w') as f:
        f.write(config_content)
    
    print("✓ Configuration file 'database_config_generated.py' created!")
    return True

def main():
    """Main setup function"""
    try:
        # Detect database type
        database_type = detect_database_type()
        if not database_type:
            return False
        
        # Run database setup
        if not run_database_setup(database_type):
            return False
        
        # Generate unified configuration
        if not generate_unified_config(database_type):
            return False
        
        print("\n" + "=" * 50)
        print("Setup Completed Successfully!")
        print("=" * 50)
        print(f"Database Type: {database_type.upper()}")
        print("Configuration: database_config_generated.py")
        print()
        print("Next Steps:")
        print("1. Update your config.py to use the generated configuration")
        print("2. Test your application")
        print("3. Start using your lifestyle analytics app!")
        
        return True
        
    except KeyboardInterrupt:
        print("\n\n⚠️ Setup cancelled by user")
        return False
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
